\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-ics.info
@documentencoding UTF-8
@settitle Guile-ICS Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-ICS version @value{VERSION}.

Copyright (C) 2017 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-ICS: (guile-ics).  Guile iCalendar (RFC5545) format parser.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-ICS Reference Manual
@subtitle For Guile-ICS @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-ICS Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::
* Tools::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-ICS is a @url{https://www.gnu.org/software/guile/, GNU Guile}
library that provides API for iCalendar
@url{https://tools.ietf.org/html/rfc5545, RFC5545} format parsing.

@node Installation
@chapter Installation

Guile-ICS sources are available form GitHub at
@url{https://github.com/artyom-poptsov/guile-ics}.  This section
describes Guile-ICS requirements and installation process.

Guile-ICS depends on the following packages:
@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0
@end itemize

To build the latest version of Guile-ICS from the sources, you need to
download the sources from GitHub or clone them using Git@footnote{A good
introduction to Git is free Pro Git book, which is available online at
@url{https://git-scm.com/book/en/v2}}.

Cloning can be done as follows:

@example
$ git clone git@@github.com:artyom-poptsov/guile-ics.git
@end example

Next, you should configure the sources:

@example
$ cd guile-ics/
$ autoreconf -vif
$ ./configure
@end example

And finally build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

Main module for Guile-ICS is @code{(ics)}.  The module contains main
procedures for reading and writing iCalendar data.

@deffn {Scheme Procedure} ics->scm [port=(current-input-port)]
Convert a iCalendar stream from a @var{port} to a Scheme representation;
return a list that represents iCalendar data.
@end deffn

@deffn {Scheme Procedure} ics-string->scm str
Convert an iCalendar string @var{str} to a Scheme representation; return
a list that represents iCalendar data.
@end deffn

@deffn {Scheme Procedure} ics-pretty-print ical-object [port=(current-output-port)] [#:indent=2]
Pretty-print an @var{ical-object} to a @var{port}.  Note that the output
is intended for human to comprehent, not to a machine to parse.
@end deffn

@deffn {Scheme Procedure} scm->ics ical-object [port=(current-output-port)]
Convert an @var{ical-object} to iCalendar format.  Print the output to a
@var{port}.
@end deffn

@deffn {Scheme Procedure} scm->ics-string ical-object
Convert an @var{ical-object} to an iCalendar format string; return the
string.
@end deffn

@deffn {Scheme Procedure} ics->stream [port (current-input-port)]
Convert an ICS stream from a @var{port} to an SRFI-41 stream
(@pxref{SRFI-41,,, guile, The GNU Guile Reference Manual}).  Return the
stream.
@end deffn

@section Converters

@deffn {Scheme Procedure} ical-object->org-mode ical-object [port=(current-output-port)]
Convert an @var{ical-object} to org-mode format (@pxref{Top,,, org,
Org Mode Manual}) and print the results to a @var{port}.
@end deffn

@section Examples

See the @file{examples} directory.

@node Tools
@chapter Tools

There is a tool called @command{ics} that allows to handle iCalendar
data.

The default behaviour of the program is to read a iCalendar stream from
stdin and pretty-print it to the stdout.

See @command{ics --help} for usage information.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
