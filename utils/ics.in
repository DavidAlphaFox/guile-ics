#!@GUILE@ \
-e main
!#

;;; ics.in -- Get various information from iCalendars.

;; Copyright (C) 2016, 2017 Artyom V. Poptsov <poptsov.artyom@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; The program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with the program.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:


;;; Code:

(use-modules (ice-9 getopt-long)
             ((ice-9 pretty-print)
              #:renamer (symbol-prefix-proc 'ice-9:))
             (srfi srfi-41)
             (ics)
             (ics ical-object)
             (ics common))

(define (print-help-and-exit)
  (display "\
Usage ics [options]

The default behaviour of the program is to read iCalendar stream from
stdin and pretty-print it to the stdout.

Options:
  --help, -h                 Print this message and exit.
  --pretty-print, -p <indent>
                             Pretty-print iCalendar stream to the
                             stdout.
")
  (exit))


;;; Option spec.

(define %option-spec
  '((help         (single-char #\h) (value #f))
    (pretty-print (single-char #\p) (value optional))))


;;; Entry point.

(define (handle-pretty-print indent)
  (stream-for-each (lambda (e)
                     (ics-pretty-print e #:indent indent))
                   (ics->stream)))

(define (main args)
  (let* ((options      (getopt-long args %option-spec))
         (help-needed? (option-ref options 'help #f))
         (pretty-print (option-ref options 'pretty-print 2)))
    (cond
     (pretty-print
      (let ((indent (if (boolean? pretty-print)
                        2
                        (string->number pretty-print))))
        (handle-pretty-print indent)))
     (#t
      (print-help-and-exit)))))

;; Local Variables:
;; mode: Scheme
;; End:

;;; ics.in ends here.
